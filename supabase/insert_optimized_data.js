// Script ch√®n d·ªØ li·ªáu cho schema Supabase t·ªëi ∆∞u h√≥a
// Script n√†y x·ª≠ l√Ω c·∫•u tr√∫c d·ªØ li·ªáu JSON v√† ch√®n v√†o database m·ªôt c√°ch hi·ªáu qu·∫£
// Data insertion script for the optimized Supabase schema
// This script processes the JSON data structure and inserts it efficiently

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// C·∫•u h√¨nh dotenv ƒë·ªÉ ƒë·ªçc bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
// Configure dotenv to read environment variables from .env file
dotenv.config();

// L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i cho ES modules
// Get current directory path for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Kh·ªüi t·∫°o client Supabase v·ªõi service role key ƒë·ªÉ c√≥ full permissions
// Initialize Supabase client with service role key for full permissions
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY, // S·ª≠ d·ª•ng service role key tr·ª±c ti·∫øp / Use service role key directly
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
      detectSessionInUrl: false
    }
  }
);

// Ki·ªÉm tra service role key / Check service role key
if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå THI·∫æU SERVICE ROLE KEY / MISSING SERVICE ROLE KEY');
  console.error('');
  console.error('üîë C·∫ßn SUPABASE_SERVICE_ROLE_KEY ƒë·ªÉ c√≥ quy·ªÅn ghi v√†o database');
  console.error('üîë Need SUPABASE_SERVICE_ROLE_KEY for database write permissions');
  console.error('');
  console.error('üìã H∆Ø·ªöNG D·∫™N L·∫§Y SERVICE ROLE KEY:');
  console.error('üìã HOW TO GET SERVICE ROLE KEY:');
  console.error('   1. ƒêi ƒë·∫øn: https://app.supabase.com');
  console.error('   2. Ch·ªçn project ‚Üí Settings ‚Üí API');
  console.error('   3. Copy "service_role" key (secret key)');
  console.error('   4. Th√™m v√†o .env: SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1...');
  console.error('');
  console.error('‚ö†Ô∏è  Service role key c√≥ quy·ªÅn admin - gi·ªØ b√≠ m·∫≠t!');
  console.error('‚ö†Ô∏è  Service role key has admin privileges - keep it secret!');
  console.error('');
  process.exit(1);
}

/**
 * Ch√®n m·ªôt batch ho√†n ch·ªânh c√°c letter v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan
 * Insert a complete batch of letters with all associated data
 * @param {Object} dataStructure - C·∫•u tr√∫c d·ªØ li·ªáu ho√†n ch·ªânh t·ª´ JSON / The complete data structure from your JSON
 */
async function insertCompleteDataBatch(dataStructure) {
  try {
    console.log('B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch√®n d·ªØ li·ªáu... / Starting data insertion process...');
    
    // 1. T·∫°o b·∫£n ghi batch x·ª≠ l√Ω trong b·∫£ng processing_batches
    // 1. Create processing batch record in processing_batches table
    const { data: batchData, error: batchError } = await supabase
      .from('processing_batches')
      .insert({
        total_items: dataStructure.metadata.totalItems,
        successful_items: dataStructure.metadata.successfulItems,
        failed_items: dataStructure.metadata.failedItems,
        status: 'processing', // ƒê·ªïi t·ª´ 'completed' th√†nh 'processing'
        summary: dataStructure.metadata.summary
      })
      .select('id')
      .single();

    if (batchError) {
      console.error('‚ùå Chi ti·∫øt l·ªói t·∫°o batch:', batchError);
      
      if (batchError.message.includes('row-level security')) {
        console.log('\nüîß GI·∫¢I PH√ÅP CHO L·ªñI RLS:');
        console.log('1. Th√™m SUPABASE_SERVICE_ROLE_KEY v√†o file .env');
        console.log('2. Ho·∫∑c ch·∫°y: npm run insert-admin');
        console.log('3. Ho·∫∑c t·∫Øt RLS t·∫°m th·ªùi (xem TROUBLESHOOTING.md)');
      }
      
      throw new Error(`T·∫°o batch th·∫•t b·∫°i / Failed to create batch: ${batchError.message}`);
    }

    const batchId = batchData.id;
    console.log(`ƒê√£ t·∫°o batch / Created batch ${batchId}`);

    // 2. X·ª≠ l√Ω t·ª´ng letter trong d·ªØ li·ªáu
    // 2. Process each letter in the data
    const letters = dataStructure.data;
    const batchSize = 10; // X·ª≠ l√Ω theo t·ª´ng nh√≥m nh·ªè ƒë·ªÉ tr√°nh timeout / Process in batches to avoid timeouts
    let processed = 0;
    let errors = [];

    for (let i = 0; i < letters.length; i += batchSize) {
      const batch = letters.slice(i, i + batchSize);
      
      console.log(`ƒêang x·ª≠ l√Ω batch / Processing batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(letters.length/batchSize)}...`);
      
      // T·∫°o promises cho t·∫•t c·∫£ letters trong batch hi·ªán t·∫°i
      // Create promises for all letters in current batch
      const promises = batch.map(letter => insertSingleLetter(letter, batchId));
      const results = await Promise.allSettled(promises);
      
      // Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa t·ª´ng promise
      // Check results of each promise
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          processed++;
        } else {
          errors.push({
            index: i + index,
            error: result.reason.message
          });
          console.error(`L·ªói x·ª≠ l√Ω letter / Error processing letter ${i + index}:`, result.reason.message);
        }
      });

      // Th√™m delay nh·ªè gi·ªØa c√°c batch ƒë·ªÉ gi·∫£m t·∫£i server
      // Add small delay between batches to reduce server load
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log(`X·ª≠ l√Ω ho√†n th√†nh / Processing complete. ƒê√£ x·ª≠ l√Ω / Processed: ${processed}, L·ªói / Errors: ${errors.length}`);
    
    // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i batch
    // 3. Update batch status
    await supabase
      .from('processing_batches')
      .update({
        successful_items: processed,
        failed_items: errors.length,
        status: errors.length === 0 ? 'completed' : 'completed_with_errors'
      })
      .eq('id', batchId);

    return {
      batchId,
      processed,
      errors
    };

  } catch (error) {
    console.error('Ch√®n batch d·ªØ li·ªáu th·∫•t b·∫°i / Failed to insert data batch:', error);
    throw error;
  }
}

/**
 * Ch√®n m·ªôt letter ƒë∆°n l·∫ª v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan
 * Insert a single letter with all its associated data
 * @param {Object} letterData - D·ªØ li·ªáu letter ri√™ng l·∫ª / Individual letter data
 * @param {string} batchId - ID c·ªßa batch ƒë·ªÉ li√™n k·∫øt / Batch ID to associate with
 */
async function insertSingleLetter(letterData, batchId) {
  try {
    // T·∫°m th·ªùi disable triggers ƒë·ªÉ tr√°nh l·ªói ambiguous column
    await supabase.rpc('exec_sql', { 
      sql: 'SET session_replication_role = replica;' 
    });

    // Insert letter tr·ª±c ti·∫øp thay v√¨ d√πng stored function
    const { data: letterResult, error: letterError } = await supabase
      .from('letters')
      .insert({
        batch_id: batchId,
        original: letterData.original,
        pinyin: letterData.pinyin || null,
        vietnamese: letterData.vietnamese || null,
        character_count: letterData.textStats?.characterCount || 0,
        word_count: letterData.textStats?.wordCount || 0,
        unique_word_count: letterData.textStats?.uniqueWordCount || 0,
        average_word_length: letterData.textStats?.averageWordLength || 0,
        processed: true
      })
      .select('id')
      .single();

    if (letterError) {
      throw new Error(`Letter insert error: ${letterError.message}`);
    }

    const letterId = letterResult.id;

    // Insert words n·∫øu c√≥
    if (letterData.words) {
      const wordInserts = [];
      for (const [hskLevel, words] of Object.entries(letterData.words)) {
        if (['hsk1', 'hsk2', 'hsk3', 'hsk4', 'hsk5', 'hsk6', 'hsk7', 'other'].includes(hskLevel)) {
          words.forEach(word => {
            wordInserts.push({
              letter_id: letterId,
              word: word,
              hsk_level: hskLevel
            });
          });
        }
      }

      if (wordInserts.length > 0) {
        await supabase.from('letter_words').insert(wordInserts);
      }
    }

    // Re-enable triggers
    await supabase.rpc('exec_sql', { 
      sql: 'SET session_replication_role = origin;' 
    });

    return letterId;
  } catch (error) {
    console.error('L·ªói ch√®n letter / Error inserting letter:', error);
    throw error;
  }
}

/**
 * Truy v·∫•n letters v·ªõi nhi·ªÅu b·ªô l·ªçc v√† t√πy ch·ªçn s·∫Øp x·∫øp kh√°c nhau
 * Query letters with various filters and sorting options
 * @param {Object} options - T√πy ch·ªçn truy v·∫•n / Query options
 */
async function queryLetters(options = {}) {
  try {
    // B·∫Øt ƒë·∫ßu v·ªõi query c∆° b·∫£n t·ª´ view ph√¢n t√≠ch ƒë·ªô kh√≥
    // Start with basic query from difficulty analysis view
    let query = supabase
      .from('letters_difficulty_analysis')
      .select('*');

    // √Åp d·ª•ng c√°c b·ªô l·ªçc / Apply filters
    if (options.category) {
      query = query.eq('category_name', options.category);
    }

    if (options.source) {
      query = query.eq('source_name', options.source);
    }

    if (options.maxDifficulty) {
      query = query.lte('difficulty_score', options.maxDifficulty);
    }

    if (options.minBeginnerFriendly) {
      query = query.gte('beginner_friendly_percentage', options.minBeginnerFriendly);
    }

    if (options.characterCountRange) {
      query = query
        .gte('character_count', options.characterCountRange.min)
        .lte('character_count', options.characterCountRange.max);
    }

    // √Åp d·ª•ng s·∫Øp x·∫øp / Apply sorting
    if (options.sortBy) {
      const direction = options.sortDirection || 'asc';
      query = query.order(options.sortBy, { ascending: direction === 'asc' });
    } else {
      // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo ƒë·ªô kh√≥ tƒÉng d·∫ßn / Default sort by difficulty ascending
      query = query.order('difficulty_score', { ascending: true });
    }

    // √Åp d·ª•ng ph√¢n trang / Apply pagination
    if (options.limit) {
      query = query.limit(options.limit);
    }

    if (options.offset) {
      query = query.range(options.offset, options.offset + (options.limit || 50) - 1);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error(`L·ªói truy v·∫•n / Query error: ${error.message}`);
    }

    return data;
  } catch (error) {
    console.error('L·ªói truy v·∫•n letters / Error querying letters:', error);
    throw error;
  }
}

/**
 * T√¨m ki·∫øm letters theo n·ªôi dung vƒÉn b·∫£n
 * Search letters by text content
 * @param {string} searchText - VƒÉn b·∫£n c·∫ßn t√¨m ki·∫øm / Text to search for
 * @param {Object} options - T√πy ch·ªçn t√¨m ki·∫øm / Search options
 */
async function searchLetters(searchText, options = {}) {
  try {
    const { data, error } = await supabase.rpc('search_letters_by_text', {
      search_text: searchText,
      search_language: options.language || 'chinese', // 'chinese', 'vietnamese', 'pinyin'
      max_results: options.limit || 20
    });

    if (error) {
      throw new Error(`L·ªói t√¨m ki·∫øm / Search error: ${error.message}`);
    }

    return data;
  } catch (error) {
    console.error('L·ªói t√¨m ki·∫øm letters / Error searching letters:', error);
    throw error;
  }
}

/**
 * L·∫•y th·ªëng k√™ t·ª´ v·ª±ng HSK
 * Get HSK vocabulary statistics
 */
async function getHSKStatistics() {
  try {
    const { data, error } = await supabase.rpc('get_hsk_statistics');

    if (error) {
      throw new Error(`L·ªói th·ªëng k√™ / Statistics error: ${error.message}`);
    }

    return data;
  } catch (error) {
    console.error('L·ªói l·∫•y th·ªëng k√™ HSK / Error getting HSK statistics:', error);
    throw error;
  }
}

/**
 * L·∫•y letters theo m·ª©c ƒë·ªô kh√≥
 * Get letters by difficulty level
 * @param {string} level - M·ª©c ƒë·ªô: 'beginner', 'intermediate', 'advanced' / Level: 'beginner', 'intermediate', 'advanced'
 */
async function getLettersByDifficulty(level) {
  // ƒê·ªãnh nghƒ©a kho·∫£ng ƒë·ªô kh√≥ cho t·ª´ng m·ª©c / Define difficulty ranges for each level
  const difficultyRanges = {
    beginner: { maxScore: 2.5, minBeginnerFriendly: 40 },      // Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu / Beginner
    intermediate: { maxScore: 5.0, minBeginnerFriendly: 20 },  // Trung b√¨nh / Intermediate  
    advanced: { maxScore: 10.0, minBeginnerFriendly: 0 }       // N√¢ng cao / Advanced
  };

  const range = difficultyRanges[level];
  if (!range) {
    throw new Error('M·ª©c ƒë·ªô kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: beginner, intermediate, ho·∫∑c advanced / Invalid difficulty level. Use: beginner, intermediate, or advanced');
  }

  return await queryLetters({
    maxDifficulty: range.maxScore,
    minBeginnerFriendly: range.minBeginnerFriendly,
    sortBy: 'difficulty_score',
    limit: 50
  });
}

// V√≠ d·ª• s·ª≠ d·ª•ng / Example usage
async function main() {
  try {
    // Test k·∫øt n·ªëi tr∆∞·ªõc khi ch√®n d·ªØ li·ªáu / Test connection before inserting data
    console.log('üîç Ki·ªÉm tra k·∫øt n·ªëi v√† quy·ªÅn truy c·∫≠p... / Testing connection and permissions...');
    
    // Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng / Check environment variables
    if (!process.env.SUPABASE_URL) {
      throw new Error('‚ùå Thi·∫øu SUPABASE_URL trong file .env / Missing SUPABASE_URL in .env file');
    }
    
    if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error('‚ùå Thi·∫øu SUPABASE_SERVICE_ROLE_KEY trong file .env / Missing SUPABASE_SERVICE_ROLE_KEY in .env file');
    }
    
    console.log('‚úÖ Service role key detected - c√≥ full database permissions / has full database permissions');
    
    // Test quy·ªÅn ƒë·ªçc / Test read permissions
    try {
      const { data: categories, error: readError } = await supabase
        .from('categories')
        .select('count(*)')
        .limit(1);
      
      if (readError) {
        console.error('‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu:', readError.message);
      } else {
        console.log('‚úÖ Quy·ªÅn ƒë·ªçc OK / Read permissions OK');
      }
    } catch (err) {
      console.warn('‚ö†Ô∏è  Kh√¥ng th·ªÉ test quy·ªÅn ƒë·ªçc:', err.message);
    }
    
    // Test quy·ªÅn ghi v√†o processing_batches / Test write permissions to processing_batches
    try {
      const testBatch = {
        total_items: 0,
        successful_items: 0,
        failed_items: 0,
        status: 'pending',
        summary: { test: true }
      };
      
      const { data: testResult, error: writeError } = await supabase
        .from('processing_batches')
        .insert(testBatch)
        .select('id')
        .single();
      
      if (writeError) {
        console.error('‚ùå L·ªói quy·ªÅn ghi:', writeError.message);
        console.log('üí° GI·∫¢I PH√ÅP:');
        console.log('   1. Th√™m SUPABASE_SERVICE_ROLE_KEY v√†o file .env');
        console.log('   2. Ho·∫∑c ch·∫°y: npm run insert-admin');
        console.log('   3. Ho·∫∑c xem file TROUBLESHOOTING.md');
        throw new Error('Kh√¥ng c√≥ quy·ªÅn ghi v√†o database. C·∫ßn service role key.');
      } else {
        console.log('‚úÖ Quy·ªÅn ghi OK / Write permissions OK');
        // X√≥a test record / Delete test record
        await supabase.from('processing_batches').delete().eq('id', testResult.id);
      }
    } catch (err) {
      if (err.message.includes('row-level security')) {
        console.error('‚ùå RLS Policy Error detected!');
        console.log('');
        console.log('üîß C√ÅCH S·ª¨A NHANH / QUICK FIX:');
        console.log('   1. L·∫•y Service Role Key t·ª´ Supabase Dashboard');
        console.log('   2. Th√™m v√†o file .env: SUPABASE_SERVICE_ROLE_KEY=your-key');
        console.log('   3. Ch·∫°y l·∫°i script n√†y');
        console.log('');
        console.log('üìñ Chi ti·∫øt trong file TROUBLESHOOTING.md');
        throw err;
      }
      throw err;
    }
    
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! B·∫Øt ƒë·∫ßu ch√®n d·ªØ li·ªáu... / Connection successful! Starting data insertion...\n');

    // V√≠ d·ª• 1: T·∫£i v√† ch√®n d·ªØ li·ªáu c·ªßa b·∫°n
    // Example 1: Load and insert your data
    // B·ªè comment d√≤ng n√†y khi b·∫°n ƒë√£ c√≥ file d·ªØ li·ªáu JSON s·∫µn s√†ng
    // Uncomment this when you have your JSON data ready
    
    const jsonData = JSON.parse(fs.readFileSync('./import-json/ketqua.json', 'utf8'));
    const result = await insertCompleteDataBatch(jsonData);
    console.log('K·∫øt qu·∫£ ch√®n / Insertion result:', result);
    

    // V√≠ d·ª• 2: Truy v·∫•n letters th√¢n thi·ªán v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
    // Example 2: Query beginner-friendly letters
    const beginnerLetters = await getLettersByDifficulty('beginner');
    console.log('T√¨m th·∫•y letters cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu / Beginner letters found:', beginnerLetters.length);

    // V√≠ d·ª• 3: T√¨m ki·∫øm n·ªôi dung c·ª• th·ªÉ
    // Example 3: Search for specific content
    const searchResults = await queryLetters({
      category: 'life',                           // Danh m·ª•c: cu·ªôc s·ªëng / Category: life
      maxDifficulty: 3.0,                        // ƒê·ªô kh√≥ t·ªëi ƒëa / Maximum difficulty
      characterCountRange: { min: 50, max: 200 }, // Kho·∫£ng s·ªë k√Ω t·ª± / Character count range
      limit: 10                                   // Gi·ªõi h·∫°n k·∫øt qu·∫£ / Result limit
    });
    console.log('K·∫øt qu·∫£ t√¨m ki·∫øm / Search results:', searchResults.length);

    // V√≠ d·ª• 4: L·∫•y th·ªëng k√™ HSK
    // Example 4: Get HSK statistics
    // const stats = await getHSKStatistics();
    // console.log('Th·ªëng k√™ HSK / HSK Statistics:', stats);

  } catch (error) {
    console.error('L·ªói th·ª±c thi ch√≠nh / Main execution error:', error);
  }
}

// Xu·∫•t c√°c functions ƒë·ªÉ s·ª≠ d·ª•ng trong modules kh√°c
// Export functions for use in other modules
export {
  insertCompleteDataBatch,    // Ch√®n batch d·ªØ li·ªáu ho√†n ch·ªânh / Insert complete data batch
  insertSingleLetter,         // Ch√®n m·ªôt letter ƒë∆°n l·∫ª / Insert single letter
  queryLetters,              // Truy v·∫•n letters / Query letters
  searchLetters,             // T√¨m ki·∫øm letters / Search letters
  getHSKStatistics,          // L·∫•y th·ªëng k√™ HSK / Get HSK statistics
  getLettersByDifficulty     // L·∫•y letters theo ƒë·ªô kh√≥ / Get letters by difficulty
};

// Ch·∫°y function main n·∫øu script n√†y ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
// Run main function if this script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
